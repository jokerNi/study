111 驱动中的结构体，主要围绕设备结构体，以字符设备的设备结构体cdev为例，

    其中几个结构体的关系 

    自定义结构体（scull_dev） <-- cdev  <--- file_operation

    inode 结构体
    linux文件系统通过inode结构表示文件，其中包含了与文件系统中各个文件相关
    的一些重要信息。在驱动开发中，inode一般作为file_operations结构中函数
    的参数传递过来，例如，open（）函数将传递一个inode指针进来，表示目前打开
    的文件节点。需要注意的是，inode的成员已经被系统赋予了合适的值，驱动程序
    只需要使用该节点中的信息，而不用更改。

    inode 结构和cdev和file_operation的关系
    例如应用程序打开设备文件A，那么系统会产生一个inode结点。这样可以通过inode结点的i_cdev字段找到cdev字符结构体。通过cdev的ops指针，就能找到设备A的操作函数。对操作函数的讲解，将放在后面的内容中。

222  
     dev = container_of(inode->i_cdev, struct scull_dev, cdev);
     inode 参数有我们需要的信息,以它的 i_cdev 成员的形式, 里面包含我们之前
     建立的 cdev 结构. 唯一的问题是通常我们不想要 cdev 结构本身, 我们需要的
     是包含 cdev 结构的 scull_dev 结构,而container_of()函数提供了这个功能

333  file 结构体（open 中的参数）
    
    open() 函数的任务之一
    分配并填充要放进 filp->private_data 的任何数据结构

    file 结构体定义在 linux/fs.h中

    它代表一个打开的文件，由内核在调用open时创建。并传递给在该文件上进行
    操作的所有函数，直到close函数被调用。在文件的所有实例都关闭时，内核释放
    这个数据结构。
    注：与inode的区别，inode表示磁盘文件，而file表示一个打开的文件

    
